#!groovy

echo "JOB_NAME     ${env.JOB_NAME}"
echo "BRANCH_NAME  ${env.BRANCH_NAME}"
echo "BUILD_URL    ${env.BUILD_URL}"
echo "BUILD_NUMBER ${env.BUILD_NUMBER}"

node('maven') {
  stage('Build') {
    git branch: 'master', url: 'https://github.com/nalbam/sample-spring'
    sh "mvn clean package -DskipTests=true"
  }
  stage('Unit Tests') {
    sh "mvn test"
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
  }
  stage('Code Analysis') {
    sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube.ops.svc:9000 -DskipTests=true"
  }
  stage('Build Image') {
    openshiftBuild(namespace: 'ops', buildConfig: 'sample-spring', showBuildLogs: 'true')
  }
  stage('Deploy DEV') {
    openshiftTag(namespace: 'ops', sourceStream: 'sample-spring', sourceTag: 'latest', destinationNamespace: 'dev', destinationStream: 'sample-spring', destinationTag: 'latest')
    openshiftDeploy(namespace: 'dev', deploymentConfig: 'sample-spring')
    openshiftScale(namespace: 'dev', deploymentConfig: 'sample-spring', replicaCount: '2')
  }
  stage('Proceeed QA') {
    input 'Proceeed ?'
  }
  stage('Deploy QA') {
    openshiftTag(namespace: 'ops', sourceStream: 'sample-spring', sourceTag: 'latest', destinationNamespace: 'qa', destinationStream: 'sample-spring', destinationTag: 'latest')
    openshiftDeploy(namespace: 'qa', deploymentConfig: 'sample-spring')
    openshiftScale(namespace: 'qa', deploymentConfig: 'sample-spring', replicaCount: '2')
  }
}
def notify(status, color) {
    slackSend(color: color, message: "${status}: ${env.JOB_NAME} <${env.BUILD_URL}|#${env.BUILD_NUMBER}>")
}
