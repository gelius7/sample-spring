#!groovy

echo "APPLICATION  ${env.APPLICATION_NAME}"
echo "NAMESPACE    ${env.NAMESPACE}"
echo "JOB_NAME     ${env.JOB_NAME}"
echo "BUILD_NUMBER ${env.BUILD_NUMBER}"
echo "GIT_URL      ${env.SOURCE_REPOSITORY_URL}"
echo "GIT_REF      ${env.SOURCE_REPOSITORY_REF}"
echo "BUILD_URL    ${env.BUILD_URL}"

node('maven') {
  def app = "${env.APPLICATION_NAME}" as java.lang.Object
  def git_url = "${env.SOURCE_REPOSITORY_URL}" as java.lang.Object
  def git_ref = "${env.SOURCE_REPOSITORY_REF}" as java.lang.Object
  def job = "${env.JOB_NAME}".replaceAll(/\//, '%2F')

  // https://jenkins-ops.52.79.165.150.xip.io/blue/organizations/jenkins/ops%2Fops-sample-node-pipeline/detail/ops-sample-node-pipeline/4/pipeline
  def url = "https://jenkins-ops.52.79.165.150.xip.io/blue/organizations/jenkins/${job}/detail/ops-${env.APPLICATION_NAME}-pipeline/${env.BUILD_NUMBER}/pipeline"

  sh "sed -i 's|<!-- ### configured mirrors ### -->|<mirror><mirrorOf>*</mirrorOf><url>${env.MAVEN_MIRROR_URL}</url><id>mirror</id></mirror>|' ~/.m2/settings.xml"

  stage('Checkout') {
    git url: git_url, branch: git_ref
  }
  stage('Build') {
    sh "mvn clean package -DskipTests=true"
  }
  stage('Unit Tests') {
    sh "mvn test"
  }
  stage('Code Analysis') {
    sh "mvn sonar:sonar -Dsonar.host.url=${env.SONAR_HOST_URL} -DskipTests=true"
  }
  stage('Build Image') {
    openshiftBuild(namespace: 'ops', buildConfig: app, showBuildLogs: 'true')
  }
  stage('Deploy DEV') {
    openshiftTag(namespace: 'ops', sourceStream: app, sourceTag: 'latest', destinationNamespace: 'dev', destinationStream: app, destinationTag: 'latest')
    openshiftDeploy(namespace: 'dev', deploymentConfig: app)
    openshiftScale(namespace: 'dev', deploymentConfig: app, replicaCount: '1')
  }
  stage('Proceed QA') {
    timeout(time: 15, unit: 'MINUTES') {
      input(message: 'Proceed QA?')
    }
  }
  stage('Deploy QA') {
    openshiftTag(namespace: 'ops', sourceStream: app, sourceTag: 'latest', destinationNamespace: 'qa', destinationStream: app, destinationTag: 'latest')
    openshiftDeploy(namespace: 'qa', deploymentConfig: app)
    openshiftScale(namespace: 'qa', deploymentConfig: app, replicaCount: '1')
  }
}
