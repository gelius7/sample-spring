node('maven') {
  stage('Build Image') {
    openshiftBuild(namespace: 'ops', buildConfig: '${env.APPLICATION_NAME}', showBuildLogs: 'true')
  }
  stage('Code Analysis') {
    git branch: '${env.SOURCE_REPOSITORY_REF}', url: '${env.SOURCE_REPOSITORY_URL}'
    sh "pwd && ls -al"
    sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube.ops.svc:9000 -DskipTests=true"
  }
  stage('Deploy DEV') {
    openshiftTag(namespace: 'ops', sourceStream: '${env.APPLICATION_NAME}', sourceTag: 'latest', destinationNamespace: 'dev', destinationStream: '${env.APPLICATION_NAME}', destinationTag: 'latest')
    openshiftDeploy(namespace: 'dev', deploymentConfig: '${env.APPLICATION_NAME}')
    openshiftScale(namespace: 'dev', deploymentConfig: '${env.APPLICATION_NAME}', replicaCount: '2')
  }
  stage('Proceeed QA') {
    input 'Proceeed ?'
  }
  stage('Deploy QA') {
    openshiftTag(namespace: 'ops', sourceStream: '${env.APPLICATION_NAME}', sourceTag: 'latest', destinationNamespace: 'qa', destinationStream: '${env.APPLICATION_NAME}', destinationTag: 'latest')
    openshiftDeploy(namespace: 'qa', deploymentConfig: '${env.APPLICATION_NAME}')
    openshiftScale(namespace: 'qa', deploymentConfig: '${env.APPLICATION_NAME}', replicaCount: '2')
  }
}
